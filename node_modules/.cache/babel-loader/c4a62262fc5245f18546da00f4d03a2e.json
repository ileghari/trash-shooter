{"ast":null,"code":"// to avoid repeating similar template literals to create curves\nexport const pathFromBezierCurve = cubicBezierCurve => {\n  const {\n    initialAxis,\n    initialControlPoint,\n    endingControlPoint,\n    endingAxis\n  } = cubicBezierCurve;\n  return `\n    M${initialAxis.x} ${initialAxis.y}\n    c ${initialControlPoint.x} ${initialControlPoint.y}\n    ${endingControlPoint.x} ${endingControlPoint.y}\n    ${endingAxis.x} ${endingAxis.y}\n    `;\n};\nexport const radiansToDegrees = radians => radians * 180 / Math.PI;\nexport const calculateAngle = (x1, y1, x2, y2) => {\n  if (x2 >= 0 && y2 >= 0) {\n    return 90;\n  } else if (x2 < 0 && y2 >= 0) {\n    return -90;\n  }\n\n  const dividend = x2 - x1;\n  const divisor = y2 - y1;\n  const quotient = dividend / divider;\n  return radiansToDegrees(Math.atan(quotient)) * -1;\n};","map":{"version":3,"sources":["/Users/ileghari/Documents/Projects/trash-shooter/src/utils/formulas.js"],"names":["pathFromBezierCurve","cubicBezierCurve","initialAxis","initialControlPoint","endingControlPoint","endingAxis","x","y","radiansToDegrees","radians","Math","PI","calculateAngle","x1","y1","x2","y2","dividend","divisor","quotient","divider","atan"],"mappings":"AAAA;AAEA,OAAO,MAAMA,mBAAmB,GAAIC,gBAAD,IAAsB;AACvD,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,mBAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA;AAJI,MAKFJ,gBALJ;AAOA,SAAQ;AACV,OAAOC,WAAW,CAACI,CAAE,IAAGJ,WAAW,CAACK,CAAE;AACtC,QAAQJ,mBAAmB,CAACG,CAAE,IAAGH,mBAAmB,CAACI,CAAE;AACvD,MAAMH,kBAAkB,CAACE,CAAE,IAAGF,kBAAkB,CAACG,CAAE;AACnD,MAAMF,UAAU,CAACC,CAAE,IAAGD,UAAU,CAACE,CAAE;AACnC,KALE;AAMD,CAdM;AAgBP,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAcA,OAAO,GAAG,GAAX,GAAkBC,IAAI,CAACC,EAA7D;AAEP,OAAO,MAAMC,cAAc,GAAG,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,KAAoB;AAChD,MAAID,EAAE,IAAI,CAAN,IAAWC,EAAE,IAAI,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD,GAFD,MAEO,IAAID,EAAE,GAAG,CAAL,IAAUC,EAAE,IAAI,CAApB,EAAuB;AAC5B,WAAO,CAAC,EAAR;AACD;;AAED,QAAMC,QAAQ,GAAGF,EAAE,GAAGF,EAAtB;AACA,QAAMK,OAAO,GAAGF,EAAE,GAAGF,EAArB;AACA,QAAMK,QAAQ,GAAGF,QAAQ,GAAGG,OAA5B;AACA,SAAOZ,gBAAgB,CAACE,IAAI,CAACW,IAAL,CAAUF,QAAV,CAAD,CAAhB,GAAwC,CAAC,CAAhD;AACD,CAXM","sourcesContent":["// to avoid repeating similar template literals to create curves\n\nexport const pathFromBezierCurve = (cubicBezierCurve) => {\n  const {\n    initialAxis,\n    initialControlPoint,\n    endingControlPoint,\n    endingAxis,\n  } = cubicBezierCurve;\n\n  return `\n    M${initialAxis.x} ${initialAxis.y}\n    c ${initialControlPoint.x} ${initialControlPoint.y}\n    ${endingControlPoint.x} ${endingControlPoint.y}\n    ${endingAxis.x} ${endingAxis.y}\n    `;\n};\n\nexport const radiansToDegrees = (radians) => (radians * 180) / Math.PI;\n\nexport const calculateAngle = (x1, y1, x2, y2) => {\n  if (x2 >= 0 && y2 >= 0) {\n    return 90;\n  } else if (x2 < 0 && y2 >= 0) {\n    return -90;\n  }\n\n  const dividend = x2 - x1;\n  const divisor = y2 - y1;\n  const quotient = dividend / divider;\n  return radiansToDegrees(Math.atan(quotient)) * -1;\n};\n"]},"metadata":{},"sourceType":"module"}